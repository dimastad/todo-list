{"version":3,"sources":["components/InputForm/InputForm.js","App.js","serviceWorker.js","index.js"],"names":["InputForm","onSubmit","onChange","value","Form","Group","Control","type","placeholder","Button","App","useState","textLength","setTextLength","text","setText","localStorage","getItem","split","notes","setNotes","Container","className","InputGroup","Prepend","Text","id","FormControl","aria-label","aria-describedby","e","target","preventDefault","length","setItem","ListGroup","map","note","index","ListGroupItem","key","htmlFor","onClick","_notes","splice","handleDelete","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wSAoBeA,EAjBG,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,MAEtC,OACE,kBAACC,EAAA,EAAD,CAAMH,SAAUA,GACd,kBAACG,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,QAAN,CACEC,KAAK,OACLC,YAAY,kBACZN,SAAUA,EACVC,MAAOA,IAET,kBAACM,EAAA,EAAD,CAAQF,KAAK,UAAb,UC4DOG,MArEf,WAAgB,IAAD,EACuBC,mBAAS,GADhC,mBACNC,EADM,KACMC,EADN,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGaJ,mBACU,OAAlCK,aAAaC,QAAQ,SACnBD,aAAaC,QAAQ,SAASC,MAAM,KACpC,IANS,mBAGNC,EAHM,KAGCC,EAHD,KA8Bb,OACE,oCACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,QACnB,yCACA,kBAACC,EAAA,EAAD,CAAYD,UAAU,eACpB,kBAACC,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,CAAiBC,GAAG,6BAApB,oBAEF,kBAACC,EAAA,EAAD,CACEC,aAAW,UACXC,mBAAiB,4BACjB3B,SA9BY,SAAC4B,GACrBjB,EAAciB,EAAEC,OAAO5B,QA8BfA,MAAOS,KAGX,kBAAC,EAAD,CACEX,SAhCY,SAAC6B,GACnBA,EAAEE,iBAEElB,EAAKmB,QAAUnB,EAAKmB,QAAUrB,IAChCQ,EAAS,CAAEN,GAAH,mBAAYK,KACpBH,aAAakB,QAAQ,QAArB,CAAgCpB,GAAhC,mBAAyCK,MAE3CJ,EAAQ,KA0BFb,SAvCa,SAAC4B,GACpBf,EAAQe,EAAEC,OAAO5B,QAuCXA,MAAOW,IACT,6BACA,kBAACqB,EAAA,EAAD,KACGhB,EAAMiB,KAAI,SAACC,EAAMC,GAAP,OACT,kBAACC,EAAA,EAAD,CACEC,IAAKF,EACLhB,UAAU,QAEV,6BACE,2BAAOf,KAAK,WAAWmB,GAAIY,IAC3B,2BAAOG,QAASH,GAAQD,IAE1B,kBAAC5B,EAAA,EAAD,CAAQiC,QAAS,kBArCR,SAACJ,GACpB,IAAMK,EAAM,YAAOxB,GACnBwB,EAAOC,OAAON,EAAO,GACrBlB,EAASuB,GACT3B,aAAakB,QAAQ,QAAS,CAAES,IAiCCE,CAAaP,KAApC,kBCrDMQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a96742d7.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Form } from 'react-bootstrap';\n\nconst InputForm = ({onSubmit, onChange, value}) => {\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <Form.Group>\n        <Form.Control \n          type='text' \n          placeholder='Input some text'\n          onChange={onChange}\n          value={value}\n           />\n        <Button type='submit'>Add</Button>\n      </Form.Group>\n    </Form>\n  );\n};\n\nexport default InputForm;","import React, { useState } from 'react';\nimport { Button, Container, FormControl, InputGroup, ListGroup, ListGroupItem } from 'react-bootstrap';\nimport InputForm from './components/InputForm/InputForm';\n// import List from './components/List/List';\n\nfunction App() {\n  const [textLength, setTextLength] = useState(5)\n  const [text, setText] = useState('')\n  const [notes, setNotes] = useState(\n    localStorage.getItem('notes') !== null\n    ? localStorage.getItem('notes').split(',')\n    : [])\n\n  const handleChange = (e) => {\n    setText(e.target.value)\n  }\n  const getTextLength = (e) => {\n    setTextLength(e.target.value)\n  }\n  const handeSubmit = (e) => {\n    e.preventDefault();\n\n    if (text.length && text.length <= textLength) {\n      setNotes([ text, ...notes ])\n      localStorage.setItem('notes', [ text, ...notes ])\n    }\n    setText('')\n  }\n  const handleDelete = (index) => {\n    const _notes = [...notes]\n    _notes.splice(index, 1)\n    setNotes(_notes)\n    localStorage.setItem('notes', [ _notes ])\n  }\n\n  return (\n    <>\n      <Container className='pt-4'>\n        <h1>ToDo List</h1>\n        <InputGroup className='text-length'>\n          <InputGroup.Prepend>\n            <InputGroup.Text id=\"inputGroup-sizing-default\">Max text length</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl\n            aria-label=\"Default\"\n            aria-describedby=\"inputGroup-sizing-default\"\n            onChange={getTextLength}\n            value={textLength}\n          />\n        </InputGroup>\n        <InputForm \n          onSubmit={handeSubmit}\n          onChange={handleChange}\n          value={text}/>\n        <hr />\n        <ListGroup>\n          {notes.map((note, index) => (\n            <ListGroupItem \n              key={index}\n              className='item'\n              >\n              <div>\n                <input type='checkbox' id={index} />\n                <label htmlFor={index}>{note}</label>\n              </div>\n              <Button onClick={() => handleDelete(index)}>delete</Button>\n            </ListGroupItem>\n          ))}\n        </ListGroup>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}